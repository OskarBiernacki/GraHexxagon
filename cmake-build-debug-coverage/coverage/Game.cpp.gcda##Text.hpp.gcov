        -:    0:Source:C:/SFML-2.5.1/include/SFML/Graphics/Text.hpp
        -:    0:Graph:C:\Users\oskar\Desktop\GraHexxagon_Projekt\cmake-build-debug-coverage\CMakeFiles\GraHexxagon_Projekt.dir\_Game\Game.cpp.gcno
        -:    0:Data:C:\Users\oskar\Desktop\GraHexxagon_Projekt\cmake-build-debug-coverage\CMakeFiles\GraHexxagon_Projekt.dir\_Game\Game.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:////////////////////////////////////////////////////////////
        -:    2://
        -:    3:// SFML - Simple and Fast Multimedia Library
        -:    4:// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)
        -:    5://
        -:    6:// This software is provided 'as-is', without any express or implied warranty.
        -:    7:// In no event will the authors be held liable for any damages arising from the use of this software.
        -:    8://
        -:    9:// Permission is granted to anyone to use this software for any purpose,
        -:   10:// including commercial applications, and to alter it and redistribute it freely,
        -:   11:// subject to the following restrictions:
        -:   12://
        -:   13:// 1. The origin of this software must not be misrepresented;
        -:   14://    you must not claim that you wrote the original software.
        -:   15://    If you use this software in a product, an acknowledgment
        -:   16://    in the product documentation would be appreciated but is not required.
        -:   17://
        -:   18:// 2. Altered source versions must be plainly marked as such,
        -:   19://    and must not be misrepresented as being the original software.
        -:   20://
        -:   21:// 3. This notice may not be removed or altered from any source distribution.
        -:   22://
        -:   23:////////////////////////////////////////////////////////////
        -:   24:
        -:   25:#ifndef SFML_TEXT_HPP
        -:   26:#define SFML_TEXT_HPP
        -:   27:
        -:   28:////////////////////////////////////////////////////////////
        -:   29:// Headers
        -:   30:////////////////////////////////////////////////////////////
        -:   31:#include <SFML/Graphics/Export.hpp>
        -:   32:#include <SFML/Graphics/Drawable.hpp>
        -:   33:#include <SFML/Graphics/Transformable.hpp>
        -:   34:#include <SFML/Graphics/Font.hpp>
        -:   35:#include <SFML/Graphics/Rect.hpp>
        -:   36:#include <SFML/Graphics/VertexArray.hpp>
        -:   37:#include <SFML/System/String.hpp>
        -:   38:#include <string>
        -:   39:#include <vector>
        -:   40:
        -:   41:
        -:   42:namespace sf
        -:   43:{
        -:   44:////////////////////////////////////////////////////////////
        -:   45:/// \brief Graphical text that can be drawn to a render target
        -:   46:///
        -:   47:////////////////////////////////////////////////////////////
function _ZN2sf4TextD1Ev called 2694 returned 100% blocks executed 100%
function _ZN2sf4TextC1ERKS0_ called 1347 returned 100% blocks executed 50%
     6735:   48:class SFML_GRAPHICS_API Text : public Drawable, public Transformable
     2694:   48-block  0
     2694:   48-block  1
call    0 returned 2694
call    1 returned 2694
call    2 returned 2694
call    3 returned 2694
call    4 returned 2694
     1347:   48-block  2
     1347:   48-block  3
call    5 returned 1347
call    6 returned 1347
call    7 returned 1347
branch  8 taken 1347 (fallthrough)
branch  9 taken 0 (throw)
     1347:   48-block  4
call   10 returned 1347
branch 11 taken 1347 (fallthrough)
branch 12 taken 0 (throw)
     1347:   48-block  5
call   13 returned 1347
branch 14 taken 1347 (fallthrough)
branch 15 taken 0 (throw)
     1347:   48-block  6
    %%%%%:   48-block  7
call   16 never executed
    %%%%%:   48-block  8
call   17 never executed
    %%%%%:   48-block  9
call   18 never executed
    %%%%%:   48-block 10
call   19 never executed
        -:   49:{
        -:   50:public:
        -:   51:
        -:   52:    ////////////////////////////////////////////////////////////
        -:   53:    /// \brief Enumeration of the string drawing styles
        -:   54:    ///
        -:   55:    ////////////////////////////////////////////////////////////
        -:   56:    enum Style
        -:   57:    {
        -:   58:        Regular       = 0,      ///< Regular characters, no style
        -:   59:        Bold          = 1 << 0, ///< Bold characters
        -:   60:        Italic        = 1 << 1, ///< Italic characters
        -:   61:        Underlined    = 1 << 2, ///< Underlined characters
        -:   62:        StrikeThrough = 1 << 3  ///< Strike through characters
        -:   63:    };
        -:   64:
        -:   65:    ////////////////////////////////////////////////////////////
        -:   66:    /// \brief Default constructor
        -:   67:    ///
        -:   68:    /// Creates an empty text.
        -:   69:    ///
        -:   70:    ////////////////////////////////////////////////////////////
        -:   71:    Text();
        -:   72:
        -:   73:    ////////////////////////////////////////////////////////////
        -:   74:    /// \brief Construct the text from a string, font and size
        -:   75:    ///
        -:   76:    /// Note that if the used font is a bitmap font, it is not
        -:   77:    /// scalable, thus not all requested sizes will be available
        -:   78:    /// to use. This needs to be taken into consideration when
        -:   79:    /// setting the character size. If you need to display text
        -:   80:    /// of a certain size, make sure the corresponding bitmap
        -:   81:    /// font that supports that size is used.
        -:   82:    ///
        -:   83:    /// \param string         Text assigned to the string
        -:   84:    /// \param font           Font used to draw the string
        -:   85:    /// \param characterSize  Base size of characters, in pixels
        -:   86:    ///
        -:   87:    ////////////////////////////////////////////////////////////
        -:   88:    Text(const String& string, const Font& font, unsigned int characterSize = 30);
        -:   89:
        -:   90:    ////////////////////////////////////////////////////////////
        -:   91:    /// \brief Set the text's string
        -:   92:    ///
        -:   93:    /// The \a string argument is a sf::String, which can
        -:   94:    /// automatically be constructed from standard string types.
        -:   95:    /// So, the following calls are all valid:
        -:   96:    /// \code
        -:   97:    /// text.setString("hello");
        -:   98:    /// text.setString(L"hello");
        -:   99:    /// text.setString(std::string("hello"));
        -:  100:    /// text.setString(std::wstring(L"hello"));
        -:  101:    /// \endcode
        -:  102:    /// A text's string is empty by default.
        -:  103:    ///
        -:  104:    /// \param string New string
        -:  105:    ///
        -:  106:    /// \see getString
        -:  107:    ///
        -:  108:    ////////////////////////////////////////////////////////////
        -:  109:    void setString(const String& string);
        -:  110:
        -:  111:    ////////////////////////////////////////////////////////////
        -:  112:    /// \brief Set the text's font
        -:  113:    ///
        -:  114:    /// The \a font argument refers to a font that must
        -:  115:    /// exist as long as the text uses it. Indeed, the text
        -:  116:    /// doesn't store its own copy of the font, but rather keeps
        -:  117:    /// a pointer to the one that you passed to this function.
        -:  118:    /// If the font is destroyed and the text tries to
        -:  119:    /// use it, the behavior is undefined.
        -:  120:    ///
        -:  121:    /// \param font New font
        -:  122:    ///
        -:  123:    /// \see getFont
        -:  124:    ///
        -:  125:    ////////////////////////////////////////////////////////////
        -:  126:    void setFont(const Font& font);
        -:  127:
        -:  128:    ////////////////////////////////////////////////////////////
        -:  129:    /// \brief Set the character size
        -:  130:    ///
        -:  131:    /// The default size is 30.
        -:  132:    ///
        -:  133:    /// Note that if the used font is a bitmap font, it is not
        -:  134:    /// scalable, thus not all requested sizes will be available
        -:  135:    /// to use. This needs to be taken into consideration when
        -:  136:    /// setting the character size. If you need to display text
        -:  137:    /// of a certain size, make sure the corresponding bitmap
        -:  138:    /// font that supports that size is used.
        -:  139:    ///
        -:  140:    /// \param size New character size, in pixels
        -:  141:    ///
        -:  142:    /// \see getCharacterSize
        -:  143:    ///
        -:  144:    ////////////////////////////////////////////////////////////
        -:  145:    void setCharacterSize(unsigned int size);
        -:  146:
        -:  147:    ////////////////////////////////////////////////////////////
        -:  148:    /// \brief Set the line spacing factor
        -:  149:    ///
        -:  150:    /// The default spacing between lines is defined by the font.
        -:  151:    /// This method enables you to set a factor for the spacing
        -:  152:    /// between lines. By default the line spacing factor is 1.
        -:  153:    ///
        -:  154:    /// \param spacingFactor New line spacing factor
        -:  155:    ///
        -:  156:    /// \see getLineSpacing
        -:  157:    ///
        -:  158:    ////////////////////////////////////////////////////////////
        -:  159:    void setLineSpacing(float spacingFactor);
        -:  160:
        -:  161:    ////////////////////////////////////////////////////////////
        -:  162:    /// \brief Set the letter spacing factor
        -:  163:    ///
        -:  164:    /// The default spacing between letters is defined by the font.
        -:  165:    /// This factor doesn't directly apply to the existing
        -:  166:    /// spacing between each character, it rather adds a fixed
        -:  167:    /// space between them which is calculated from the font
        -:  168:    /// metrics and the character size.
        -:  169:    /// Note that factors below 1 (including negative numbers) bring
        -:  170:    /// characters closer to each other.
        -:  171:    /// By default the letter spacing factor is 1.
        -:  172:    ///
        -:  173:    /// \param spacingFactor New letter spacing factor
        -:  174:    ///
        -:  175:    /// \see getLetterSpacing
        -:  176:    ///
        -:  177:    ////////////////////////////////////////////////////////////
        -:  178:    void setLetterSpacing(float spacingFactor);
        -:  179:
        -:  180:    ////////////////////////////////////////////////////////////
        -:  181:    /// \brief Set the text's style
        -:  182:    ///
        -:  183:    /// You can pass a combination of one or more styles, for
        -:  184:    /// example sf::Text::Bold | sf::Text::Italic.
        -:  185:    /// The default style is sf::Text::Regular.
        -:  186:    ///
        -:  187:    /// \param style New style
        -:  188:    ///
        -:  189:    /// \see getStyle
        -:  190:    ///
        -:  191:    ////////////////////////////////////////////////////////////
        -:  192:    void setStyle(Uint32 style);
        -:  193:
        -:  194:    ////////////////////////////////////////////////////////////
        -:  195:    /// \brief Set the fill color of the text
        -:  196:    ///
        -:  197:    /// By default, the text's fill color is opaque white.
        -:  198:    /// Setting the fill color to a transparent color with an outline
        -:  199:    /// will cause the outline to be displayed in the fill area of the text.
        -:  200:    ///
        -:  201:    /// \param color New fill color of the text
        -:  202:    ///
        -:  203:    /// \see getFillColor
        -:  204:    ///
        -:  205:    /// \deprecated There is now fill and outline colors instead
        -:  206:    /// of a single global color.
        -:  207:    /// Use setFillColor() or setOutlineColor() instead.
        -:  208:    ///
        -:  209:    ////////////////////////////////////////////////////////////
        -:  210:    SFML_DEPRECATED void setColor(const Color& color);
        -:  211:
        -:  212:    ////////////////////////////////////////////////////////////
        -:  213:    /// \brief Set the fill color of the text
        -:  214:    ///
        -:  215:    /// By default, the text's fill color is opaque white.
        -:  216:    /// Setting the fill color to a transparent color with an outline
        -:  217:    /// will cause the outline to be displayed in the fill area of the text.
        -:  218:    ///
        -:  219:    /// \param color New fill color of the text
        -:  220:    ///
        -:  221:    /// \see getFillColor
        -:  222:    ///
        -:  223:    ////////////////////////////////////////////////////////////
        -:  224:    void setFillColor(const Color& color);
        -:  225:
        -:  226:    ////////////////////////////////////////////////////////////
        -:  227:    /// \brief Set the outline color of the text
        -:  228:    ///
        -:  229:    /// By default, the text's outline color is opaque black.
        -:  230:    ///
        -:  231:    /// \param color New outline color of the text
        -:  232:    ///
        -:  233:    /// \see getOutlineColor
        -:  234:    ///
        -:  235:    ////////////////////////////////////////////////////////////
        -:  236:    void setOutlineColor(const Color& color);
        -:  237:
        -:  238:    ////////////////////////////////////////////////////////////
        -:  239:    /// \brief Set the thickness of the text's outline
        -:  240:    ///
        -:  241:    /// By default, the outline thickness is 0.
        -:  242:    ///
        -:  243:    /// Be aware that using a negative value for the outline
        -:  244:    /// thickness will cause distorted rendering.
        -:  245:    ///
        -:  246:    /// \param thickness New outline thickness, in pixels
        -:  247:    ///
        -:  248:    /// \see getOutlineThickness
        -:  249:    ///
        -:  250:    ////////////////////////////////////////////////////////////
        -:  251:    void setOutlineThickness(float thickness);
        -:  252:
        -:  253:    ////////////////////////////////////////////////////////////
        -:  254:    /// \brief Get the text's string
        -:  255:    ///
        -:  256:    /// The returned string is a sf::String, which can automatically
        -:  257:    /// be converted to standard string types. So, the following
        -:  258:    /// lines of code are all valid:
        -:  259:    /// \code
        -:  260:    /// sf::String   s1 = text.getString();
        -:  261:    /// std::string  s2 = text.getString();
        -:  262:    /// std::wstring s3 = text.getString();
        -:  263:    /// \endcode
        -:  264:    ///
        -:  265:    /// \return Text's string
        -:  266:    ///
        -:  267:    /// \see setString
        -:  268:    ///
        -:  269:    ////////////////////////////////////////////////////////////
        -:  270:    const String& getString() const;
        -:  271:
        -:  272:    ////////////////////////////////////////////////////////////
        -:  273:    /// \brief Get the text's font
        -:  274:    ///
        -:  275:    /// If the text has no font attached, a NULL pointer is returned.
        -:  276:    /// The returned pointer is const, which means that you
        -:  277:    /// cannot modify the font when you get it from this function.
        -:  278:    ///
        -:  279:    /// \return Pointer to the text's font
        -:  280:    ///
        -:  281:    /// \see setFont
        -:  282:    ///
        -:  283:    ////////////////////////////////////////////////////////////
        -:  284:    const Font* getFont() const;
        -:  285:
        -:  286:    ////////////////////////////////////////////////////////////
        -:  287:    /// \brief Get the character size
        -:  288:    ///
        -:  289:    /// \return Size of the characters, in pixels
        -:  290:    ///
        -:  291:    /// \see setCharacterSize
        -:  292:    ///
        -:  293:    ////////////////////////////////////////////////////////////
        -:  294:    unsigned int getCharacterSize() const;
        -:  295:
        -:  296:    ////////////////////////////////////////////////////////////
        -:  297:    /// \brief Get the size of the letter spacing factor
        -:  298:    ///
        -:  299:    /// \return Size of the letter spacing factor
        -:  300:    ///
        -:  301:    /// \see setLetterSpacing
        -:  302:    ///
        -:  303:    ////////////////////////////////////////////////////////////
        -:  304:    float getLetterSpacing() const;
        -:  305:
        -:  306:    ////////////////////////////////////////////////////////////
        -:  307:    /// \brief Get the size of the line spacing factor
        -:  308:    ///
        -:  309:    /// \return Size of the line spacing factor
        -:  310:    ///
        -:  311:    /// \see setLineSpacing
        -:  312:    ///
        -:  313:    ////////////////////////////////////////////////////////////
        -:  314:    float getLineSpacing() const;
        -:  315:
        -:  316:    ////////////////////////////////////////////////////////////
        -:  317:    /// \brief Get the text's style
        -:  318:    ///
        -:  319:    /// \return Text's style
        -:  320:    ///
        -:  321:    /// \see setStyle
        -:  322:    ///
        -:  323:    ////////////////////////////////////////////////////////////
        -:  324:    Uint32 getStyle() const;
        -:  325:
        -:  326:    ////////////////////////////////////////////////////////////
        -:  327:    /// \brief Get the fill color of the text
        -:  328:    ///
        -:  329:    /// \return Fill color of the text
        -:  330:    ///
        -:  331:    /// \see setFillColor
        -:  332:    ///
        -:  333:    /// \deprecated There is now fill and outline colors instead
        -:  334:    /// of a single global color.
        -:  335:    /// Use getFillColor() or getOutlineColor() instead.
        -:  336:    ///
        -:  337:    ////////////////////////////////////////////////////////////
        -:  338:    SFML_DEPRECATED const Color& getColor() const;
        -:  339:
        -:  340:    ////////////////////////////////////////////////////////////
        -:  341:    /// \brief Get the fill color of the text
        -:  342:    ///
        -:  343:    /// \return Fill color of the text
        -:  344:    ///
        -:  345:    /// \see setFillColor
        -:  346:    ///
        -:  347:    ////////////////////////////////////////////////////////////
        -:  348:    const Color& getFillColor() const;
        -:  349:
        -:  350:    ////////////////////////////////////////////////////////////
        -:  351:    /// \brief Get the outline color of the text
        -:  352:    ///
        -:  353:    /// \return Outline color of the text
        -:  354:    ///
        -:  355:    /// \see setOutlineColor
        -:  356:    ///
        -:  357:    ////////////////////////////////////////////////////////////
        -:  358:    const Color& getOutlineColor() const;
        -:  359:
        -:  360:    ////////////////////////////////////////////////////////////
        -:  361:    /// \brief Get the outline thickness of the text
        -:  362:    ///
        -:  363:    /// \return Outline thickness of the text, in pixels
        -:  364:    ///
        -:  365:    /// \see setOutlineThickness
        -:  366:    ///
        -:  367:    ////////////////////////////////////////////////////////////
        -:  368:    float getOutlineThickness() const;
        -:  369:
        -:  370:    ////////////////////////////////////////////////////////////
        -:  371:    /// \brief Return the position of the \a index-th character
        -:  372:    ///
        -:  373:    /// This function computes the visual position of a character
        -:  374:    /// from its index in the string. The returned position is
        -:  375:    /// in global coordinates (translation, rotation, scale and
        -:  376:    /// origin are applied).
        -:  377:    /// If \a index is out of range, the position of the end of
        -:  378:    /// the string is returned.
        -:  379:    ///
        -:  380:    /// \param index Index of the character
        -:  381:    ///
        -:  382:    /// \return Position of the character
        -:  383:    ///
        -:  384:    ////////////////////////////////////////////////////////////
        -:  385:    Vector2f findCharacterPos(std::size_t index) const;
        -:  386:
        -:  387:    ////////////////////////////////////////////////////////////
        -:  388:    /// \brief Get the local bounding rectangle of the entity
        -:  389:    ///
        -:  390:    /// The returned rectangle is in local coordinates, which means
        -:  391:    /// that it ignores the transformations (translation, rotation,
        -:  392:    /// scale, ...) that are applied to the entity.
        -:  393:    /// In other words, this function returns the bounds of the
        -:  394:    /// entity in the entity's coordinate system.
        -:  395:    ///
        -:  396:    /// \return Local bounding rectangle of the entity
        -:  397:    ///
        -:  398:    ////////////////////////////////////////////////////////////
        -:  399:    FloatRect getLocalBounds() const;
        -:  400:
        -:  401:    ////////////////////////////////////////////////////////////
        -:  402:    /// \brief Get the global bounding rectangle of the entity
        -:  403:    ///
        -:  404:    /// The returned rectangle is in global coordinates, which means
        -:  405:    /// that it takes into account the transformations (translation,
        -:  406:    /// rotation, scale, ...) that are applied to the entity.
        -:  407:    /// In other words, this function returns the bounds of the
        -:  408:    /// text in the global 2D world's coordinate system.
        -:  409:    ///
        -:  410:    /// \return Global bounding rectangle of the entity
        -:  411:    ///
        -:  412:    ////////////////////////////////////////////////////////////
        -:  413:    FloatRect getGlobalBounds() const;
        -:  414:
        -:  415:private:
        -:  416:
        -:  417:    ////////////////////////////////////////////////////////////
        -:  418:    /// \brief Draw the text to a render target
        -:  419:    ///
        -:  420:    /// \param target Render target to draw to
        -:  421:    /// \param states Current render states
        -:  422:    ///
        -:  423:    ////////////////////////////////////////////////////////////
        -:  424:    virtual void draw(RenderTarget& target, RenderStates states) const;
        -:  425:
        -:  426:    ////////////////////////////////////////////////////////////
        -:  427:    /// \brief Make sure the text's geometry is updated
        -:  428:    ///
        -:  429:    /// All the attributes related to rendering are cached, such
        -:  430:    /// that the geometry is only updated when necessary.
        -:  431:    ///
        -:  432:    ////////////////////////////////////////////////////////////
        -:  433:    void ensureGeometryUpdate() const;
        -:  434:
        -:  435:    ////////////////////////////////////////////////////////////
        -:  436:    // Member data
        -:  437:    ////////////////////////////////////////////////////////////
        -:  438:    String              m_string;              ///< String to display
        -:  439:    const Font*         m_font;                ///< Font used to display the string
        -:  440:    unsigned int        m_characterSize;       ///< Base size of characters, in pixels
        -:  441:    float               m_letterSpacingFactor; ///< Spacing factor between letters
        -:  442:    float               m_lineSpacingFactor;   ///< Spacing factor between lines
        -:  443:    Uint32              m_style;               ///< Text style (see Style enum)
        -:  444:    Color               m_fillColor;           ///< Text fill color
        -:  445:    Color               m_outlineColor;        ///< Text outline color
        -:  446:    float               m_outlineThickness;    ///< Thickness of the text's outline
        -:  447:    mutable VertexArray m_vertices;            ///< Vertex array containing the fill geometry
        -:  448:    mutable VertexArray m_outlineVertices;     ///< Vertex array containing the outline geometry
        -:  449:    mutable FloatRect   m_bounds;              ///< Bounding rectangle of the text (in local coordinates)
        -:  450:    mutable bool        m_geometryNeedUpdate;  ///< Does the geometry need to be recomputed?
        -:  451:    mutable Uint64      m_fontTextureId;       ///< The font texture id
        -:  452:};
        -:  453:
        -:  454:} // namespace sf
        -:  455:
        -:  456:
        -:  457:#endif // SFML_TEXT_HPP
        -:  458:
        -:  459:
        -:  460:////////////////////////////////////////////////////////////
        -:  461:/// \class sf::Text
        -:  462:/// \ingroup graphics
        -:  463:///
        -:  464:/// sf::Text is a drawable class that allows to easily display
        -:  465:/// some text with custom style and color on a render target.
        -:  466:///
        -:  467:/// It inherits all the functions from sf::Transformable:
        -:  468:/// position, rotation, scale, origin. It also adds text-specific
        -:  469:/// properties such as the font to use, the character size,
        -:  470:/// the font style (bold, italic, underlined and strike through), the
        -:  471:/// text color, the outline thickness, the outline color, the character
        -:  472:/// spacing, the line spacing and the text to display of course.
        -:  473:/// It also provides convenience functions to calculate the
        -:  474:/// graphical size of the text, or to get the global position
        -:  475:/// of a given character.
        -:  476:///
        -:  477:/// sf::Text works in combination with the sf::Font class, which
        -:  478:/// loads and provides the glyphs (visual characters) of a given font.
        -:  479:///
        -:  480:/// The separation of sf::Font and sf::Text allows more flexibility
        -:  481:/// and better performances: indeed a sf::Font is a heavy resource,
        -:  482:/// and any operation on it is slow (often too slow for real-time
        -:  483:/// applications). On the other side, a sf::Text is a lightweight
        -:  484:/// object which can combine the glyphs data and metrics of a sf::Font
        -:  485:/// to display any text on a render target.
        -:  486:///
        -:  487:/// It is important to note that the sf::Text instance doesn't
        -:  488:/// copy the font that it uses, it only keeps a reference to it.
        -:  489:/// Thus, a sf::Font must not be destructed while it is
        -:  490:/// used by a sf::Text (i.e. never write a function that
        -:  491:/// uses a local sf::Font instance for creating a text).
        -:  492:///
        -:  493:/// See also the note on coordinates and undistorted rendering in sf::Transformable.
        -:  494:///
        -:  495:/// Usage example:
        -:  496:/// \code
        -:  497:/// // Declare and load a font
        -:  498:/// sf::Font font;
        -:  499:/// font.loadFromFile("arial.ttf");
        -:  500:///
        -:  501:/// // Create a text
        -:  502:/// sf::Text text("hello", font);
        -:  503:/// text.setCharacterSize(30);
        -:  504:/// text.setStyle(sf::Text::Bold);
        -:  505:/// text.setFillColor(sf::Color::Red);
        -:  506:///
        -:  507:/// // Draw it
        -:  508:/// window.draw(text);
        -:  509:/// \endcode
        -:  510:///
        -:  511:/// \see sf::Font, sf::Transformable
        -:  512:///
        -:  513:////////////////////////////////////////////////////////////
